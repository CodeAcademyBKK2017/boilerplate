// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`NoteList renderItem 1`] = `
<Swipeout
  autoClose={true}
  disabled={false}
  right={
    Array [
      Object {
        "backgroundColor": "#003",
        "onPress": [Function],
        "text": "Info",
      },
      Object {
        "backgroundColor": "#666",
        "text": "Cancel",
      },
      Object {
        "backgroundColor": "#900",
        "onPress": undefined,
        "text": "Delete",
      },
    ]
  }
  rowID={-1}
  sectionID={-1}
  sensitivity={50}
>
  <View
    style={
      Object {
        "flexDirection": "row",
        "justifyContent": "space-between",
      }
    }
  >
    <TouchableOpacity
      activeOpacity={0.2}
      onPress={[Function]}
    >
      <View>
        <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
          style={
            Object {
              "fontWeight": "bold",
            }
          }
        >
          Title
        </Text>
        <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
          style={
            Object {
              "paddingLeft": 10,
            }
          }
        >
          Content
        </Text>
      </View>
    </TouchableOpacity>
  </View>
</Swipeout>
`;

exports[`NoteList renders correctly 1`] = `
<View>
  <RCTScrollView
    data={
      Array [
        Object {
          "content": "Content",
          "title": "Title",
          "uuid": "1",
        },
        Object {
          "content": "Content 2",
          "title": "Title 2",
          "uuid": "2",
        },
        Object {
          "content": "Content 3",
          "title": "Title 3",
          "uuid": "3",
        },
      ]
    }
    disableVirtualization={false}
    extraData={Object {}}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={false}
    initialNumToRender={10}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    numColumns={1}
    onContentSizeChange={[Function]}
    onEndReachedThreshold={2}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={Array []}
    style={
      Object {
        "backgroundColor": "#dbddde",
        "padding": 10,
      }
    }
    updateCellsBatchingPeriod={50}
    viewabilityConfigCallbackPairs={Array []}
    windowSize={21}
  >
    <View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          style={
            Array [
              Object {
                "backgroundColor": "#dbddde",
                "overflow": "hidden",
              },
              undefined,
            ]
          }
        >
          <View
            onLayout={[Function]}
            onMoveShouldSetResponder={[Function]}
            onMoveShouldSetResponderCapture={[Function]}
            onResponderEnd={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderReject={[Function]}
            onResponderRelease={[Function]}
            onResponderStart={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            onStartShouldSetResponderCapture={[Function]}
            style={
              Array [
                Object {},
                Object {
                  "left": 0,
                },
              ]
            }
          >
            <View
              style={
                Object {
                  "flexDirection": "row",
                  "justifyContent": "space-between",
                }
              }
            >
              <View
                accessibilityComponentType={undefined}
                accessibilityLabel={undefined}
                accessibilityTraits={undefined}
                accessible={true}
                collapsable={undefined}
                hasTVPreferredFocus={undefined}
                hitSlop={undefined}
                isTVSelectable={true}
                nativeID={undefined}
                onLayout={undefined}
                onResponderGrant={[Function]}
                onResponderMove={[Function]}
                onResponderRelease={[Function]}
                onResponderTerminate={[Function]}
                onResponderTerminationRequest={[Function]}
                onStartShouldSetResponder={[Function]}
                style={
                  Object {
                    "opacity": 1,
                  }
                }
                testID={undefined}
                tvParallaxProperties={undefined}
              >
                <View>
                  <Text
                    accessible={true}
                    allowFontScaling={true}
                    ellipsizeMode="tail"
                    style={
                      Object {
                        "fontWeight": "bold",
                      }
                    }
                  >
                    Title
                  </Text>
                  <Text
                    accessible={true}
                    allowFontScaling={true}
                    ellipsizeMode="tail"
                    style={
                      Object {
                        "paddingLeft": 10,
                      }
                    }
                  >
                    Content
                  </Text>
                </View>
              </View>
            </View>
          </View>
          <View />
          <View />
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          style={
            Array [
              Object {
                "backgroundColor": "#dbddde",
                "overflow": "hidden",
              },
              undefined,
            ]
          }
        >
          <View
            onLayout={[Function]}
            onMoveShouldSetResponder={[Function]}
            onMoveShouldSetResponderCapture={[Function]}
            onResponderEnd={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderReject={[Function]}
            onResponderRelease={[Function]}
            onResponderStart={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            onStartShouldSetResponderCapture={[Function]}
            style={
              Array [
                Object {},
                Object {
                  "left": 0,
                },
              ]
            }
          >
            <View
              style={
                Object {
                  "flexDirection": "row",
                  "justifyContent": "space-between",
                }
              }
            >
              <View
                accessibilityComponentType={undefined}
                accessibilityLabel={undefined}
                accessibilityTraits={undefined}
                accessible={true}
                collapsable={undefined}
                hasTVPreferredFocus={undefined}
                hitSlop={undefined}
                isTVSelectable={true}
                nativeID={undefined}
                onLayout={undefined}
                onResponderGrant={[Function]}
                onResponderMove={[Function]}
                onResponderRelease={[Function]}
                onResponderTerminate={[Function]}
                onResponderTerminationRequest={[Function]}
                onStartShouldSetResponder={[Function]}
                style={
                  Object {
                    "opacity": 1,
                  }
                }
                testID={undefined}
                tvParallaxProperties={undefined}
              >
                <View>
                  <Text
                    accessible={true}
                    allowFontScaling={true}
                    ellipsizeMode="tail"
                    style={
                      Object {
                        "fontWeight": "bold",
                      }
                    }
                  >
                    Title 2
                  </Text>
                  <Text
                    accessible={true}
                    allowFontScaling={true}
                    ellipsizeMode="tail"
                    style={
                      Object {
                        "paddingLeft": 10,
                      }
                    }
                  >
                    Content 2
                  </Text>
                </View>
              </View>
            </View>
          </View>
          <View />
          <View />
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          style={
            Array [
              Object {
                "backgroundColor": "#dbddde",
                "overflow": "hidden",
              },
              undefined,
            ]
          }
        >
          <View
            onLayout={[Function]}
            onMoveShouldSetResponder={[Function]}
            onMoveShouldSetResponderCapture={[Function]}
            onResponderEnd={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderReject={[Function]}
            onResponderRelease={[Function]}
            onResponderStart={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            onStartShouldSetResponderCapture={[Function]}
            style={
              Array [
                Object {},
                Object {
                  "left": 0,
                },
              ]
            }
          >
            <View
              style={
                Object {
                  "flexDirection": "row",
                  "justifyContent": "space-between",
                }
              }
            >
              <View
                accessibilityComponentType={undefined}
                accessibilityLabel={undefined}
                accessibilityTraits={undefined}
                accessible={true}
                collapsable={undefined}
                hasTVPreferredFocus={undefined}
                hitSlop={undefined}
                isTVSelectable={true}
                nativeID={undefined}
                onLayout={undefined}
                onResponderGrant={[Function]}
                onResponderMove={[Function]}
                onResponderRelease={[Function]}
                onResponderTerminate={[Function]}
                onResponderTerminationRequest={[Function]}
                onStartShouldSetResponder={[Function]}
                style={
                  Object {
                    "opacity": 1,
                  }
                }
                testID={undefined}
                tvParallaxProperties={undefined}
              >
                <View>
                  <Text
                    accessible={true}
                    allowFontScaling={true}
                    ellipsizeMode="tail"
                    style={
                      Object {
                        "fontWeight": "bold",
                      }
                    }
                  >
                    Title 3
                  </Text>
                  <Text
                    accessible={true}
                    allowFontScaling={true}
                    ellipsizeMode="tail"
                    style={
                      Object {
                        "paddingLeft": 10,
                      }
                    }
                  >
                    Content 3
                  </Text>
                </View>
              </View>
            </View>
          </View>
          <View />
          <View />
        </View>
      </View>
    </View>
  </RCTScrollView>
  <Modal
    animationOutType="fadeOut"
    animationType="none"
    hardwareAccelerated={false}
    onClose={[Function]}
    onRequestClose={[Function]}
    transparent={true}
    visible={false}
  >
    <View
      accessibilityComponentType={undefined}
      accessibilityLabel={undefined}
      accessibilityTraits={undefined}
      accessible={true}
      collapsable={undefined}
      hitSlop={undefined}
      nativeID={undefined}
      onLayout={undefined}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "backgroundColor": "rgba(37, 8, 10, 0.78)",
          "flex": 1,
          "justifyContent": "center",
          "opacity": 0,
          "padding": 20,
        }
      }
      testID={undefined}
    >
      <View
        accessibilityComponentType={undefined}
        accessibilityLabel={undefined}
        accessibilityTraits={undefined}
        accessible={true}
        hitSlop={undefined}
        nativeID={undefined}
        onLayout={undefined}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Array [
            Object {
              "alignItems": "center",
              "backgroundColor": "white",
              "padding": 20,
            },
            undefined,
          ]
        }
        testID={undefined}
      >
        <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
          style={
            Object {
              "fontWeight": "bold",
            }
          }
        >
          
        </Text>
        <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
          style={Object {}}
        >
          
        </Text>
      </View>
    </View>
  </Modal>
</View>
`;
